openapi: 3.0.0
info:
  title: "Diabetes-api"
  version: "1.0"
  
paths:
  /users/:
    post:
      summary: "Create a new user"
      tags: 
        - "UserController"
      description: "Api to return user having given id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /login:
    post:
      summary: "User login"
      tags: 
        - "LoginController"
      description: "Enables a user to login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: "successful operation.Return a user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInUser'
        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "No user exists"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: "Unexpected error"
  
  /readings/updateReadings:
    put:
      summary: "Update reading"
      tags: 
        - ReadingController
      description: "Api to update today's reading"
      parameters:
        - name: "userId"
          in: query
          required: true
          description: "The ID of the user whose readings need to be updated."
          schema:
            type: number
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingDetailsDto'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingDetailsDto'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: reading not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /readings/:
    post:
      summary: "Save a new reading"
      tags: 
        - ReadingController
      description: "Api to save a new reading having given id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingDetailsDto'
      responses:
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingDetails'
        '405':
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /readings/todaysReading:
    get:
      summary: "Return readings of today"
      tags: 
        - "ReadingController"
      description: "Api to return readngs of today"
      parameters:
        - name: "userId"
          in: query
          required: true
          description: "The ID of the user whose readings need to be retrieved."
          schema:
            type: number
            minimum: 1
      responses:
        '200':
          description: "Return all readings of the given day of the given user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadingDetailsDto'
        '400':
          description: "The given userId or date is invalid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "No user exists with given id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: "Unexpected error"
  /readings:
    get:
      summary: "return today's reading of the logged in user"
      tags: 
        - "ReadingController"
      description: "Api to return today's reading of the logged in user"
      parameters:
        - name: "userId"
          in: header
          required: true
          description: "The ID of the user whose readings need to be retrieved."
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: "Return all readings of the given user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadingDetailsDto'
        '400':
          description: "The given userId is invalid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "No user exists"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: "Unexpected error"
          
components:
  schemas:
    UserDto:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        contactNumber:
          type: "string"
        email:
          type: "string"
        userName:
          type: "string"
        password:
          type: "string"
    User:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        contactNumber:
          type: "string"
        email:
          type: "string"
        id:
          type: "number"
        userId:
          type: "number"
    LoginCredentials:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    LoggedInUser:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        contactNumber:
          type: "string"
        email:
          type: "string"
        userName:
          type: "string"
        password:
          type: "string"
        userId:
          type: "number"
    ErrorResponse:
      type: "object"
      properties:
        statuscode:
          type: "integer"
        message:
          type: "string"
    ReadingDetailsDto:
      type: "object"
      properties:
        userId:
          type: "number"
        date:
          type: "string"
        day:
          type: "string"
        insulinBeforeBed:
          type: "number"
        insulinBeforeBedTime:
          type: "string"
        sugarAtFast:
          type: "number"
        sugarAtFastTime:
          type: "string"
        mrngInsulinBeforeFood:
          type: "number"
        mrngInsulinBeforeFoodTime:
          type: "string"
        mrngInsulinAfterFood:
          type: "number"
        mrngInsulinAfterFoodTime:
          type: "string"
        mrngPlace:
          type: "string"
        mrngSugarBeforeFood:
          type: "number"
        mrngSugarBeforeFoodTime:
          type: "string"
        mrngSugarAfterFood:
          type: "number"
        mrngSugarAfterFoodTime:
          type: "string"
        noonInsulinBeforeFood:
          type: "number"
        noonInsulinBeforeFoodTime:
          type: "string"
        noonInsulinAfterFood:
          type: "number"
        noonInsulinAfterFoodTime:
          type: "string"
        noonPlace:
          type: "string"
        noonSugarBeforeFood:
          type: "number"
        noonSugarBeforeFoodTime:
          type: "string"
        noonSugarAfterFood:
          type: "number"
        noonSugarAfterFoodTime:
          type: "string"
        evngInsulinBeforeFood:
          type: "number"
        evngInsulinBeforeFoodTime:
          type: "string"
        evngInsulinAfterFood:
          type: "number"
        evngInsulinAfterFoodTime:
          type: "string"
        evngPlace:
          type: "string"
        evngSugarBeforeFood:
          type: "number"
        evngSugarBeforeFoodTime:
          type: "string"
        evngSugarAfterFood:
          type: "number"
        evngSugarAfterFoodTime:
          type: "string"
        comment:
          type: "string"
          
    ReadingDetails:
      type: "object"
      properties:
        id:
          type: "number"
        userId:
          type: "number"
        date:
          type: "string"
        day:
          type: "string"
        insulinBeforeBed:
          type: "number"
        insulinBeforeBedTime:
          type: "string"
        sugarAtFast:
          type: "number"
        sugarAtFastTime:
          type: "string"
        mrngInsulinBeforeFood:
          type: "number"
        mrngInsulinBeforeFoodTime:
          type: "string"
        mrngInsulinAfterFood:
          type: "number"
        mrngInsulinAfterFoodTime:
          type: "string"
        mrngPlace:
          type: "string"
        mrngSugarBeforeFood:
          type: "number"
        mrngSugarBeforeFoodTime:
          type: "string"
        mrngSugarAfterFood:
          type: "number"
        mrngSugarAfterFoodTime:
          type: "string"
        noonInsulinBeforeFood:
          type: "number"
        noonInsulinBeforeFoodTime:
          type: "string"
        noonInsulinAfterFood:
          type: "number"
        noonInsulinAfterFoodTime:
          type: "string"
        noonPlace:
          type: "string"
        noonSugarBeforeFood:
          type: "number"
        noonSugarBeforeFoodTime:
          type: "string"
        noonSugarAfterFood:
          type: "number"
        noonSugarAfterFoodTime:
          type: "string"
        evngInsulinBeforeFood:
          type: "number"
        evngInsulinBeforeFoodTime:
          type: "string"
        evngInsulinAfterFood:
          type: "number"
        evngInsulinAfterFoodTime:
          type: "string"
        evngPlace:
          type: "string"
        evngSugarBeforeFood:
          type: "number"
        evngSugarBeforeFoodTime:
          type: "string"
        evngSugarAfterFood:
          type: "number"
        evngSugarAfterFoodTime:
          type: "string"
        comment:
          type: "string"