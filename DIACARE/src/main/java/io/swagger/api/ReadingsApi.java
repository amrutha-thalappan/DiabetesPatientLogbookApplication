/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DataListDto;
import io.swagger.model.ErrorResponse;
import io.swagger.model.DiabetesData;
import io.swagger.annotations.*;
import io.swagger.model.DiabetesDataDto;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-21T16:30:27.879Z[GMT]")
@CrossOrigin(origins = "http://localhost:8082", maxAge = 3600)
@Api(value = "readings", description = "the readings API")
public interface ReadingsApi {

    @ApiOperation(value = "Delete all readings", nickname = "readingsDelete", notes = "Api to delete all readings", tags={ "ReadingController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 404, message = "No reading exists to delete", response = ErrorResponse.class) })
    @RequestMapping(value = "/readings/",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> readingsDelete();


    @ApiOperation(value = "Return readings of the given day of logged in user", nickname = "readingsGet", notes = "Api to return all the readngs of the given day of the logged in user", response = DiabetesData.class, responseContainer = "List", tags={ "ReadingController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return all readings of the given day of the given user", response = DiabetesData.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "The given userId or date is invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "No user exists with given id", response = ErrorResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/readings/weekreadings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DataListDto>> readingsGet(@ApiParam(value = "The ID of the user whose readings need to be retrieved." ,required=true) @RequestParam(value="userId", required=true) Integer userId
);


    @ApiOperation(value = "Save a new reading", nickname = "readingsPost", notes = "Api to save a new reading having given id", tags={ "ReadingController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 405, message = "Invalid input", response = ErrorResponse.class) })
    @RequestMapping(value = "/readings/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DiabetesData> readingsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DiabetesDataDto body
);


    @ApiOperation(value = "delete a reading of logged in user", nickname = "readingsReadingIdDelete", notes = "Api to delete a reading having given id of logged in user", tags={ "ReadingController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 404, message = "reading not found", response = ErrorResponse.class) })
    @RequestMapping(value = "/readings/{readingId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> readingsReadingIdDelete(@Min(1)@ApiParam(value = "The ID of the reading to delete",required=true, allowableValues="") @PathVariable("readingId") Integer readingId
);


    @ApiOperation(value = "return reading of the logged in user based on the given reading id", nickname = "readingsReadingIdGet", notes = "Api to return reading of the logged in user based on the given reading id", response = DiabetesData.class, tags={ "ReadingController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation.Return a user having given id", response = DiabetesData.class),
        @ApiResponse(code = 400, message = "The specified reading ID is invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "No readng exists", response = ErrorResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/readings/{readingId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DiabetesData> readingsReadingIdGet(@Min(1)@ApiParam(value = "The ID of the reading to return",required=true, allowableValues="") @PathVariable("readingId") Integer readingId
);


    @ApiOperation(value = "Update reading", nickname = "readingsReadingIdPut", notes = "Api to update a reading having given id", response = DiabetesData.class, tags={ "ReadingController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = DiabetesData.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "reading not found", response = ErrorResponse.class),
        @ApiResponse(code = 405, message = "Invalid input", response = ErrorResponse.class) })
    @RequestMapping(value = "/readings/{readingId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<DiabetesData> readingsReadingIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DiabetesData body
, @Min(1)@ApiParam(value = "The ID of the reading to return",required=true, allowableValues="") @PathVariable("readingId") Integer readingId
);


    @ApiOperation(value = "Return all readings of the logged in user", nickname = "readingsUserIdGet", notes = "Api to return all the readng of the logged in user", response = DiabetesData.class, responseContainer = "List", tags={ "ReadingController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return all readings of the given user", response = DiabetesData.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "The given userId is invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "No user exists", response = ErrorResponse.class),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/readings/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DiabetesData>> readingsUserIdGet(@DecimalMin("1")@ApiParam(value = "The ID of the user whose readings need to be retrieved.",required=true) @PathVariable("userId") String userId
);

}
