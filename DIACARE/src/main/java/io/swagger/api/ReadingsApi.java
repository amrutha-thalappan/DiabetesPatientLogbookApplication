/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.ErrorResponse;
import io.swagger.model.ReadingDetails;
import io.swagger.model.ReadingDetailsDto;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-21T16:30:27.879Z[GMT]")
@CrossOrigin(origins = "http://localhost:8082", maxAge = 3600)
@Api(value = "readings", description = "the readings API")
@RequestMapping(value = "/readings/")
public interface ReadingsApi {

    @ApiOperation(value = "Save a new reading", nickname = "readingsPost", notes = "Api to save a new reading having given id", tags={ "ReadingController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 405, message = "Invalid input", response = ErrorResponse.class) })
    @PostMapping
    ResponseEntity<?> readingsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ReadingDetailsDto body
);

    @ApiOperation(value = "Update reading", nickname = "readingsPut", notes = "Api to update a today's reading", response = ReadingDetails.class, tags={ "ReadingController", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = ReadingDetails.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "reading not found", response = ErrorResponse.class),
        @ApiResponse(code = 405, message = "Invalid input", response = ErrorResponse.class) })
    @PutMapping(value = "/updateReadings")
    ResponseEntity<?> readingsPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ReadingDetailsDto body
);


    @ApiOperation(value = "return today's reading of the logged in user", nickname = "readingsReadingIdGet", notes = "Api to return today's reading of the logged in user", response = ReadingDetailsDto.class, tags={ "ReadingController", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation.Return today's reading", response = ReadingDetailsDto.class),
            @ApiResponse(code = 400, message = "The specified reading ID is invalid", response = ErrorResponse.class),
            @ApiResponse(code = 404, message = "No readng exists", response = ErrorResponse.class),
            @ApiResponse(code = 200, message = "Unexpected error") })
    @GetMapping(value = "/todaysReading")
    ResponseEntity<?> todaysReadingsGet(@ApiParam(value = "The ID of the user whose readings need to be retrieved." ,required=true) @RequestParam(value="userId", required=true) Integer userId
    );

    @ApiOperation(value = "Return all readings", nickname = "allReadingsGet", notes = "Api to return all readings of the user", response = ReadingDetailsDto.class, responseContainer = "List", tags={ "ReadingController", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Return all readings of the given user", response = ReadingDetailsDto.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "The given userId or date is invalid", response = ErrorResponse.class),
            @ApiResponse(code = 404, message = "No user exists with given id", response = ErrorResponse.class),
            @ApiResponse(code = 200, message = "Unexpected error") })
    @GetMapping(value = "/allReadings")
    ResponseEntity<?> allReadingsGet(@ApiParam(value = "The ID of the user whose readings need to be retrieved." ,required=true) @RequestParam(value="userId", required=true) Integer userId
    );

}
